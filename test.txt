package java;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;
import org.apache.spark.sql.hive.HiveContext;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import scala.Function1;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.File;
import java.io.IOException;

public class app {
    public static void main(String[] args) {
        SparkConf conf = new SparkConf().setAppName("test");
        app.readXML(conf,args[0]);
        //读取配置文件
        if(args.length!=1){
            return;
        }

        if(conf.get("dataSourceType").equals("1")){
            conf.setMaster("local[2]");
        }

        JavaSparkContext sc = new JavaSparkContext(conf);

        JavaRDD<String> data=null;
        //1：本地，2：hdfs，3：hive，4：kafka
        if(conf.get("dataSourceType").equals("1")){
            data=sc.textFile(conf.get("dataSourceLocalPath"));
        }else if(conf.get("dataSourceType").equals("2")){
            data=sc.textFile(conf.get("dataSourceHdfsPath"));
        }else if(conf.get("dataSourceType").equals("3")){
            HiveContext hiveContext=new HiveContext(sc);
            String hive_sql = "select eci,area_user_percent from default.area_cell_relation_base where eci is not null and area_user_percent is not null"
            data= hiveContext.sql(hive_sql).map(new Function1<Row, Object>() {
            }
        }else if(conf.get("dataSourceType").equals("4")){

        }

        data.foreach(x->System.out.println(x));


    }

    public static void readXML(SparkConf config, String strPath) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = null;
        try {
            builder = factory.newDocumentBuilder();
            Document document = null;
            document = builder.parse(new File(strPath));
            //get root element
            Element rootElement = document.getDocumentElement();
            //add root

            NodeList tmpNodeList = rootElement.getChildNodes();
            for (int i = 0; i < tmpNodeList.getLength(); i++) {
                Node node = tmpNodeList.item(i);
                //System.out.println(node.getNodeName() + " " + node.hasChildNodes() );
                if (node.hasChildNodes()) {
                    NodeList sons = node.getChildNodes();
                    if (sons.getLength()==1) {
                        System.out.println(node.getNodeName() + "  " + node.getFirstChild().getNodeValue());
                        config.set(node.getNodeName(), node.getFirstChild().getNodeValue());
                    }else{
                        //System.out.println(node.getNodeName() + "  " + node.getNodeType() + " " + node.getFirstChild().getNodeValue());
                        for (int j=0; j < sons.getLength();j++)
                        {
                            Node jnode = sons.item(j);
                            if ( jnode.getNodeType() == node.ELEMENT_NODE ) {
                                System.out.println( node.getNodeName()  + "_" +jnode.getNodeName() +  "  " + jnode.getTextContent()) ;
                                config.set( node.getNodeName()+"_"+jnode.getNodeName(), jnode.getTextContent());
                            }
                        }
                    }
                }
            }
        } catch (ParserConfigurationException | SAXException | IOException e) {
            // TODO Auto-generated catch block
            System.out.println("Exception: " + e.getMessage());
        }
    }

}
